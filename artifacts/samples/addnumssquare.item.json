{
    "uuid": "C9EA68F9-04C1-4A8E-B04A-A1B27D84EEAA",
    "realmUuid": "Demo",
    "parentUuid": "E18BCC85-C09D-4075-AF9D-80CF6F7DC47D",
    "copiedFromUuid": null,
    "publishStatus": 9,
    "version": "0.9",
    "type": "item",
    "meta_subject": "Math",
    "meta_subjectArea": "Arithmetic",
    "meta_domainCodeSource": null,
    "meta_domainCode": null,
    "meta_authors": "Young-Suk Ahn",
    "meta_locale": "EN_us",
    "meta_title": "Addition under 10",
    "meta_description": "Addition of one digit numbers from 0 to 9",
    "meta_expectedDuration": null,
    "meta_difficulty": null,
    "meta_license": "cc-by-nc-sa\/4.0",
    "content": {
        "variableDeclarations": {
            "num1": {
                "@doc": "the first number to find (two of this)",
                "baseType": "number",
                "value": 2,
                "minVal": 0,
                "maxVal": 10
            },
            "num2": {
                "@doc": "the second number to find",
                "hidden": true,
                "baseType": "number",
                "value": 4,
                "minVal": 1,
                "maxVal": 10
            },
            "num3": {
                "@doc": "the given number",
                "hidden": true,
                "baseType": "number",
                "value": 8,
                "minVal": 1,
                "maxVal": 10
            },
            "patternIndex": {
                "@doc": "the positioning pattern index in the permuation. 24 is the num of permuatations",
                "hidden": true,
                "baseType": "number",
                "@doc": "variability - strict: boundaries cannot change",
                "variability": "strict",
                "value": 9,
                "minVal": 0,
                "maxVal": 24
            }
        },
        "responseDeclarations": {
            "field1a": {
                "@doc": "The first number",
                "cardinality": "multiple",
                "baseType": "number",
                "correctAnswer": {
                    "eq": "$num2"
                }
            },
            "field1b": {
                "@doc": "The first number (duplicate)",
                "cardinality": "multiple",
                "baseType": "number",
                "correctAnswer": {
                    "eq": "$num2"
                }
            },
            "field2": {
                "@doc": "The second number",
                "cardinality": "single",
                "baseType": "number",
                "correctAnswer": {
                    "eq": "$num3"
                }
            },
            "fieldSum": {
                "@doc": "The summation: num1 + (2*num2) + num3",
                "cardinality": "single",
                "baseType": "number"
            }
        },

        "outcomeDeclarations": {
            "@doc": "The following is a ",
            "score": {
                "cardinality": "single",
                "baseType": "number",
                "@doc": "This data must be stripped out",
                "defaultValue": 0
            }
        },
        "modelDefinition": {

            "question1": {
                "prompt": "Find the numbers",
                "fields": [
                    {
                        "responseId": "field1a"
                    },
                    {
                        "responseId": "field1b"
                    },
                    {
                        "responseId": "field2"
                    },
                    {
                        "responseId": "fieldSum"
                    }
                ]
            }
        },

        "responseProcessing": {

            "when": [
                {
                    "@doc": "For the meantime, this is the method for init",
                    "case": "true",
                    "then": {
                        "field1a.score": 0,
                        "field1a.feedback": "Incorrect",
                        "field1b.score": 0,
                        "field1b.feedback": "Incorrect",
                        "field2.score": 0,
                        "field2.feedback": "Incorrect",
                        "fieldSum.score": 0,
                        "fieldSum.feedback": "Incorrect"
                    }
                },
                {
                    "case": "$field1a_value == $var_num1",
                    "then": {
                        "field1a.score": 1,
                        "field1a.feedback": "Correct"
                    }
                },
                {
                    "case": "$field1b_value == $var_num1",
                    "then": {
                        "field1b.score": 1,
                        "field1b.feedback": "Correct"
                    }
                },
                {
                    "case": "$field2_value == $var_num2",
                    "then": {
                        "field2.score": 1,
                        "field2.feedback": "Correct"
                    }
                },
                {
                    "case": "$fieldSum_value == (2 * $var_num1) + $var_num2 + var_num3",
                    "then": {
                        "fieldSum.score": 1,
                        "fieldSum.feedback": "Total summation is correct!"
                    }
                }
            ]
        },

        "@doc": "This section is defines the structure of this item.",
        "body": {
            "mainComponent": "my_question",
            "components": {
                "my_question": {
                    "type": "TemplateContainer",
                    "config": {
                        "template": "<div>{{.component.numberquestion}}  {{actionbar}} {{feedback}}</div>"
                    }
                },
                "numberquestion": {
                    "type": "NineNumbersQuestion",
                    "config": {
                        "question": { "_ref" : ".model.question1"}
                    }
                },
                "actionbar": {
                    "type": "ActionBar",
                    "config": {
                        "items": [
                            "submit"
                        ]
                    }
                },
                "feedback": {
                    "type": "Feedback",
                    "config": {
                        "display": "list",
                        "@doc": "In the client-side player, this is the path",
                        "@doc": "to the store (Redux)",
                        "messageRef": "_aggregate_.feedback"
                    }
                }
            }
        },

        "@doc": "This section defines the default policy which can be overriden",
        "@doc": "by runtime environment",
        "defaultPolicy": {
            "maxAttempts": 3,
            "@doc": "Optional - if present, each attempt will be timed in seconds",
            "timed": 10,
            "@doc": "If timed is present, following action takes place when time is over",
            "onTimeOver": "autosubmit"
        },

        "middleware": {
            "beforeInstantiation": {
                "class": "VariablesRandomizer",
                "params": {}
            }
        }
    }

}
